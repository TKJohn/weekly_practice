Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Go程序设计语言

## 并发

### 数据竞态

#### 两个goroutine并发读写同一个变量，并且至少其中一个是写入的

#### 避免方法

##### 不要修改变量

##### 通信顺序进程/CSP（Communication Sequential Process）

###### 避免从多个goroutine访问同一个变量，变量访问被限制在监控goroutine中

###### 在不同的执行体goroutine之间通过通道传递值，但是变量本身局限于单一的执行体goroutine

###### 不要通过共享内存来通信，而应该通过通信来共享内存

##### 共享内存多线程传统模型/共享变量上锁

###### 允许多个goroutine访问同一个变量，但使用互斥量在同一时间只有一个goroutine可以访问

####### 二进制信号量

####### 互斥锁

### goroutine与线程

#### 可增长的栈

#### goroutine调度

##### 线程

###### 上下文切换1

####### 保存一个线程的状态到内存

####### 恢复另一个线程的状态

####### 更新调度器（内核函数）的数据结构

###### 上下文切换2

####### 对来自缓存的所有修改过的块进行回写磁盘操作

####### 修改存储器管理单元（Memory Management Unit，MMU）中的映像寄存器

###### 上下文切换3

####### 由OS内核来调度

####### 每隔几毫秒，一个硬件时钟中断发到CPU，CPU调用一个叫调度器的内核函数

####### 这个函数暂停当前正在运行的线程，把它的寄存器信息保存到内存

####### 查看线程列表并根据优先级决定接下来运行哪一个线程

####### 从内存恢复线程的注册表信息，继续执行选中的线程

#### GOMAXPROCS
